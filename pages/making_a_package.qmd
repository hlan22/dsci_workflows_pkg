---
title: "Steps For Making An R Package"
format: html
---

This explanation has been taken entirely from [The Whole Game](https://r-pkgs.org/whole-game.html), edited and simplified by me. Credit is given completely to those authors!

## `devtools`

Load the `devtools` package, which is the public face of a set of packages that support various aspects of package development.
The most obvious of these packages is the `usethis` package, which you'll see is also being loaded.

```r
install.packages("devtools")
library(devtools)
```

### Package Components

Features commonly seen in released packages:

-   **Functions** to address a specific need
-   **Version control** and an open development process.
-   Access to established workflows for installation, getting help, and checking quality.
    -   Documentation for individual functions via [roxygen2](https://roxygen2.r-lib.org).
    -   Unit testing with [testthat](https://testthat.r-lib.org).
    -   Documentation for the package as a whole via an executable `README.Rmd`.

## `create_package()`

Call `create_package()` to initialize a new package in a directory on your computer.

* `create_package()` will automatically create that directory if it doesn't exist yet.
* Make a deliberate choice about where to create this package on your computer. It should not be nested inside another RStudio Project, R package, or Git repo.
* Put your chosen path into a `create_package()` call like this:

```r
create_package("~/git/pathToPackage")
```

If you're working in RStudio, you should find yourself in a new instance of RStudio, opened into your new package (and Project). RStudio has special handling for packages and you should now see a *Build* tab in the same pane as *Environment* and *History*.

You probably need to call `library(devtools)` again, because `create_package()` has probably dropped you into a fresh R session, in your new package.

```r
library(devtools)
```

What's in this new directory that is an R package and an RStudio Project?

| File          | Use                                                   |
|:--------------|:------------------------------------------------------|
|`.Rbuildignore`| Lists files that we need to have around but that should not be included when building the R package from source. |
|`.Rproj.user`  | If you have it, is a directory used internally by RStudio.|
| `.gitignore`  | Anticipates Git usage and tells Git to ignore some standard, behind-the-scenes files created by R and RStudio. |
| `DESCRIPTION` | Provides metadata about your package. |
| `NAMESPACE`   | Declares the functions your package exports for external use and the external functions your package imports from other packages.
| `R/` directory| The "business end" of your package. It will soon contain `.R` files with function definitions. |
| `*.Rproj`     | The file that makes this directory an RStudio Project. Even if you don't use RStudio, this file is harmless. |

:Files in an R Package {#tbl-rpackage .striped .hover}

---

## `use_git()`

This directory is an R package and an RStudio Project. We can also make it also a Git repository with `use_git()`.

```r
use_git()
```

* The only thing that changes is the creation of a `.git` directory, which is hidden in most contexts, including the RStudio file browser. Its existence is evidence that we have indeed initialized a Git repo here.
* If you're using RStudio, it probably requested permission to relaunch itself in this Project, which you should do. You can do so manually by quitting, then relaunching RStudio by double clicking on your project file.

---

## `use_r()`

Now we get to write functions for our package!

Refer to the [functions page](#functions.qmd) for more information.

Where should you put the definition of your function?

* Save it in a `.R` file, in the `R/` sub-directory of your package.
* A reasonable starting position is to make a new `.R` file for each user-facing function in your package and name the file after the function. As you add more functions, you'll want to relax this and begin to group related functions together.
* **Note:** The function file should NOT contain any of the other top-level code we have recently executed, such as library calls `library(devtools)`, or other things such as `use_git()`.

You can use the `use_r()` function to help create new files in the `R/` directory:
```r
use_r("function_name")
```

---

## `load_all()` {#sec-whole-game-load-all}

How do we test drive our functions though? Call `load_all()` to make the functions you made available for experimentation.

```r
load_all()
```

* `load_all()` simulates the process of building, installing, and attaching the package.
* As your package accumulates more functions, some exported, some not, some of which call each other, some of which call functions from packages you depend on, `load_all()` gives you a much more accurate sense of how the package is developing than test driving functions defined in the global environment.
* It also allows much faster iteration than actually building, installing, and attaching the package.

Note that `load_all()` has made the functions available, although it does **not** exist in the global environment. You can check with the following:

```r
exists("function_name", where = globalenv(), inherits = FALSE)
```

If you see `TRUE` instead of `FALSE`, that indicates you're still using a script-oriented workflow and sourcing your functions.
Here's how to get back on track:

-   Clean out the global environment and restart R.
-   Re-attach devtools with `library(devtools)` and re-load your functions with `load_all()`.
-   Redefine the test input and call your function again.
-   Run `exists("function_name", where = globalenv(), inherits = FALSE)` again and you should see `FALSE`.

---

## `check()`

We have informal, empirical evidence that our functions work. But how can we be sure that all the moving parts of the package still work?

`R CMD check`, executed in the shell, is the gold standard for checking that an R package is in full working order.
`check()` is a convenient way to run this without leaving your R session.

```r
check()
```
Note that `check()` produces rather voluminous output, optimized for interactive consumption.

At this point, we expect 1 warning (and 0 errors, 0 notes):

```         
Non-standard license specification:
  `use_mit_license()`, `use_gpl3_license()` 
   or friends to pick a license
```

Shout out to this clear description of different licenses: [Pick a License, Any License. -- Jeff Atwood](https://blog.codinghorror.com/pick-a-license-any-license/)

We currently have a placeholder in the `License` field of `DESCRIPTION` that's deliberately invalid and suggests a resolution.

```         
License: `use_mit_license()`, `use_gpl3_license()` 
          or friends to pick a license
```

To configure a valid license for the package, call `use_mit_license()`.

```r
use_mit_license()
```

This configures the `License` field correctly for the MIT license, which promises to name the copyright holders and year in a `LICENSE` file.
Open the newly created `LICENSE` file and confirm it looks something like this:

```r
YEAR: 2025
COPYRIGHT HOLDER: regexcite authors
```

* Like other license helpers, `use_mit_license()` also puts a copy of the full license in `LICENSE.md` and adds this file to `.Rbuildignore`.
* It's considered a best practice to include a full license in your package's source, such as on GitHub, but CRAN disallows the inclusion of this file in a package tarball.

---

## `DESCRIPTION`

The `DESCRIPTION` file provides metadata about your package.

Make these edits:

* Make yourself the author. If you don't have an ORCID (a research ID), you can omit the `comment = ...` portion.
* Write some descriptive text in the `Title` and `Description` fields.
* Ensure you have a license

When you're done, `DESCRIPTION` should look similar to this:

```html
Package: regexcite
Title: Make Regular Expressions More Exciting
Version: 0.0.0.9000
Authors@R: 
    person("Jane", "Doe", , "jane@example.com", role = c("aut", "cre"))
Description: Convenience functions to make some common tasks with string
    manipulation and regular expressions a bit easier.
License: MIT + file LICENSE
Encoding: UTF-8
Roxygen: list(markdown = TRUE)
RoxygenNote: 7.1.2
```

---

## `document()` {#sec-whole-game-document}

Learn how to write Roxygen statements [on the functions page](#functions.qmd)

But we're not done yet! We still need to trigger the conversion of this new roxygen comment into `man/function_name.Rd` with `document()`:

```r
document()
```

The call `document()` does two main jobs:

1.  Converts our roxygen comments into proper R documentation.
2.  (Re)generates `NAMESPACE`.

You should now be able to preview your help file for your function like so:

```r
?function_name
```

* You'll see a message like "Rendering development documentation for `function_name`", which reminds that you are basically previewing draft documentation. That is, this documentation is present in your package's source, but is not yet present in an installed package.
* If it doesn't work for you, you may need to call `load_all()` first, then try again.

#### `NAMESPACE` Updates

In addition to converting `function_name()`'s special comment into `man/function_name.Rd`, the call to `document()` updates the `NAMESPACE` file, based on `@export` tags found in roxygen comments.

Open `NAMESPACE` for inspection. The contents should be:

```r
# Generated by roxygen2: do not edit by hand

export(function_name)
```

* The export directive in `NAMESPACE` is what makes `function_name()` available to a user after attaching your-package via `library(your-package)`.
J* ust as it is entirely possible to author `.Rd` files "by hand", you can manage `NAMESPACE` explicitly yourself. But we choose to delegate this to devtools (and roxygen2).

---

## `check()` again

Your package should pass `R CMD check` cleanly now and forever more: 0 errors, 0 warnings, 0 notes.

```r
check()
```

---

## `install()`

Now that we know we have a minimum viable product, let's install your package into your library via `install()`:

```r
install()
```

After installation is complete, we can attach and use your package like any other package.
Let's revisit our small example from the top.

```r
library(yourPackage)

stuff <- 1

function_name(stuff)
```
This is also a good time to restart your R session and ensure you have a clean workspace.

---

## `use_testthat()`

Please see [the tests page](#tests.qmd) for more information on making tests.

We should test our functions to ensure they follow the behavior we expect.

```r
use_testthat()
```

* This initializes the unit testing machinery for your package.
* It adds `Suggests: testthat` to `DESCRIPTION`, creates the directory `tests/testthat/`, and adds the script `tests/testthat.R`.

The helper `use_test()` opens and/or creates a test file.

```r
use_test("function_name")
```

Make sure to write the actual tests!

Run your tests as such: 

```r
test()
```

* Your tests are also run whenever you `check()` the package.

---

## `use_package()`

You will inevitably want to use a function from another package in your own package.
We will need to use package-specific methods for declaring the other packages we need (i.e. our dependencies) and for using these packages in ours.
**If you plan to submit a package to CRAN, note that this even applies to functions in packages that you think of as "always available", such as `stats::median()` or `utils::head()`.**

One common dilemma when using R's regular expression functions is uncertainty about whether to request `perl = TRUE` or `perl = FALSE`.
And then there are often, but not always, other arguments that alter how patterns are matched, such as `fixed`, `ignore.case`, and `invert`.
It can be hard to keep track of which functions use which arguments and how the arguments interact, so many users never get to the point where they retain these details without rereading the docs.

Let's imagine you decide you'd rather build your package using the `stringr` (and `stringi`) package than base R's regular expression functions.

First, declare your general intent to use some functions from the stringr namespace with `use_package()`:

```r
use_package("stringr")
```

This adds the `stringr` package to the `Imports` field of `DESCRIPTION`.
And that is all it does.


Let's revisit `function_name()` to make it more `stringr`-like.

Here are some changes to include:

-   Rename the function to `str_split_one()`, to signal that it is a wrapper around `stringr::str_split()`.
-   Adopt the argument names from `stringr::str_split()`. Now we have `string` and `pattern` (and `n`), instead of `x` and `split`.
-   Introduce a bit of argument checking and edge case handling. This is unrelated to the switch to stringr and would be equally beneficial in the version built on `strsplit()`.
-   **Use the `package::function()` form when calling `stringr::str_split()`. This specifies that we want to call the `str_split()` function from the `stringr` namespace. There is more than one way to call a function from another package.**

But now we need to rename the function file based on the new function name!

Because this comes up fairly often in real life, we have the `rename_files()` function, which choreographs the renaming of a file in `R/` and its associated companion files below `test/`.

```r
rename_files("function_name", "new-function_name")
```

Here are the updated contents of `R/str_split_one.R`.
In addition to changing the function definition, we've also updated the roxygen header to reflect the new arguments and to include examples that show off the stringr features.

```r
#' Split a string
#'
#' @param string A character vector with, at most, one element.
#' @inheritParams stringr::str_split
#'
#' @return A character vector.
#' @export
#'
#' @examples
#' x <- "alfa,bravo,charlie,delta"
#' str_split_one(x, pattern = ",")
#' str_split_one(x, pattern = ",", n = 2)
#'
#' y <- "192.168.0.1"
#' str_split_one(y, pattern = stringr::fixed("."))
str_split_one <- function(string, pattern, n = Inf) {
  stopifnot(is.character(string), length(string) <= 1)
  if (length(string) == 1) {
    stringr::str_split(string = string, pattern = pattern, n = n)[[1]]
  } else {
    character()
  }
}
```

Don't forget to also update the test file!

Before we take the new `str_split_one()` out for a test drive, we need to call `document()`. Why? We need to regenerate the `NAMESPACE` file to include the new imports.

Don't be dismayed by the warning about `"Objects listed as exports, but not present in namespace: function_name"`. That always happens when you remove something from the namespace.

```r
document()
```

Try out the new `str_split_one()` function by simulating package installation via `load_all()`:

```r
load_all()
str_split_one("a, b, c", pattern = ", ")
```

---

## `use_github()`

You've seen us making commits during the development process for your package. By looking at diffs, you can see exactly how each `devtools` helper function modifies the source files that make up the package.

How would you connect your local package and Git repository to a companion repository on GitHub? Here are three approaches:

1.  [`use_github()`](https://usethis.r-lib.org/reference/use_github.html) is a helper that we recommend for the long-term.

2.  Set up the GitHub repo first! It sounds counter-intuitive, but the easiest way to get your work onto GitHub is to initiate there, then use RStudio to start working in a synced local copy. This approach is described in Happy Git's workflows [New project, GitHub first](https://happygitwithr.com/new-github-first.html) and [Existing project, GitHub first](https://happygitwithr.com/existing-github-first.html).

3.  Command line Git can always be used to add a remote repository *post hoc*. This is described in the Happy Git workflow [Existing project, GitHub last](https://happygitwithr.com/existing-github-last.html).

Any of these approaches will connect your local project to a GitHub repo, public or private, which you can push to or pull from using the Git client built into RStudio.

---

## `use_readme_rmd()`

Please see [the README section in the Badges, Licenses & More page](#supporting.qmd) for more thorough information!

Now that your package is on GitHub, the `README.md` file matters.
It is the package's home page and welcome mat, at least until you decide to give it a website, add a vignette, or submit it to CRAN.

The `use_readme_rmd()` function initializes a basic, executable `README.Rmd` ready for you to edit:

```r
use_readme_rmd()
```

* This creates `README.Rmd`, 
* adds some lines to `.Rbuildignore`
* creates a Git pre-commit hook to help you keep `README.Rmd` and `README.md` in sync.

Fill out the `README.Rmd` file!

Don't forget to render it to make `README.md`:

```r
build_readme()
```

---

## The end: `check()` and `install()`

Let's run `check()` again to make sure all is still well.

```r
check()
```

Your package should have no errors, warnings or notes.
This would be a good time to re-build and install it properly, and celebrate!

```r
install()
```

## Review

Here is a review of the key functions you've seen in this chapter, organized roughly by their role in the development process.

These functions setup parts of the package and are typically called once per package:

-   `create_package()`
-   `use_git()`
-   `use_mit_license()`
-   `use_testthat()`
-   `use_github()`
-   `use_readme_rmd()`

You will call these functions on a regular basis, as you add functions and tests or take on dependencies:

-   `use_r()`
-   `use_test()`
-   `use_package()`

You will call these functions multiple times per day or per hour, during development:

-   `load_all()`
-   `document()`
-   `test()`
-   `check()`
