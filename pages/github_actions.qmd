---
# title: "github_actions"
format: html
---
# GitHub Actions

See the following for more information:

- [Textbook: CI and workflows](https://ubc-dsci.github.io/reproducible-and-trustworthy-workflows-for-data-science/lectures/200-continuous-integration.html)
- [Textbook: Github actions](https://ubc-dsci.github.io/reproducible-and-trustworthy-workflows-for-data-science/lectures/201-github_actions.html)

We can make github actions to help automate our processes.

We have two main examples we can work with, one from class and one from the website.

In order for github actions to work, it needs to be placed in a very specific folder location of: .github/workflows/<file.yml>

```bash
mkdir -p .github/workflows/
cd .github/workflows/
code bash.yml
```
The following is a sample of a github action you can do, where you run a bash command:

```bash
name: Run a bash command # this is what specifies the automation

on:
  workflow_dispatch: # says: manually run this in the github interface...
  push: # if a push happens to the repo then ...
    branches: [main] # if a push happens to the main branch also make these changes
    paths:  # or only trigger when one of these files is changed
      - 'Dockerfile'
      - .github/workflows/bash.yml # or whatever you named the file
      - 'conda-linux-64.lock'
      # could also do something like every week update it ... etc.

jobs: # specify the jobs you want to create
  run_bash_command: # name of the job, the one yaml understands
    name: Run a bash command using github actions # a human-readable name that is nice for us to look at
    runs-on: ubuntu-latest # operating system you want github to run on, this one is most common for linux, you could say windows-latest or mac-latest too
    steps: # actual steps to run
      - name: Check out the repo # run git clone and cd into it
        uses: actions/checkout@v4 # probably automating off something in your repository, so usually your first step
      - name: Run a command manually
        run: ls -a
      - name: Run multiple commands manually # use a vertical bar |
        run: | 
          pwd
          ls -a
      - name: Run multiple commands manually with script
        run: bash bash_script.sh
```

Then you can just commit this file and the action should work!


There are also other github actions you can do, of course. Here is one taken from the course textbook that allows you to publish your docker image to docker hub.

```bash
# Publishes docker image, pinning actions to a commit SHA,
# and updating most recently built image with the latest tag.
# Can be triggered by either pushing a commit that changes the `Dockerfile`,
# or manually dispatching the workflow.

name: Publish Docker image

on:
  workflow_dispatch:
  push:
    paths:
      - 'Dockerfile'
      - .github/workflows/docker-publish.yml # or whatever you named the file
      - 'conda-linux-64.lock'

jobs:
  push_to_registry:
    name: Push Docker image to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }} # do not change, add as secret
          password: ${{ secrets.DOCKER_PASSWORD }} # do not change, add as secret

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ttimbers/dsci522-dockerfile-practice # change to your image
          tags: |
            type=raw, value={{sha}},enable=${{github.ref_type != 'tag' }}
            type=raw, value=latest

      - name: Build and push Docker image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
```

Checkout <https://ubc-dsci.github.io/reproducible-and-trustworthy-workflows-for-data-science/lectures/201-github_actions.html> for more customization.

Also note that in this one you need to add a secret username and password in the repo you're in, and you also need to edit to proper naming.
