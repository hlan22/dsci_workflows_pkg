---
title: "Testing for Packages"
format: html
---

Here is where we talked about testthat in the textbook: <https://ubc-dsci.github.io/reproducible-and-trustworthy-workflows-for-data-science/lectures/142-R-testing-example.html>

# `library(testthat)`

## Thorough steps for an R Package

We've tested `function-name()` **informally**, in a single example.
We can, and should, express a concrete expectation about the correct `function-name()` result for a specific input.

First, we declare our intent to write unit tests and to use the testthat package for this, via `use_testthat()`:

```r
use_testthat()
```

* This initializes the unit testing machinery for your package.
* It adds `Suggests: testthat` to `DESCRIPTION`, creates the directory `tests/testthat/`, and adds the script `tests/testthat.R`.
* You'll notice that testthat is probably added with a minimum version of 3.0.0 and a second DESCRIPTION field, `Config/testthat/edition: 3`.

However, it's still up to YOU to write the actual tests!

The helper `use_test()` opens and/or creates a test file.
If `R/function-name.R` is the active file in RStudio, you can just call `use_test()`.
However, we can also provide the basename explicitly:

```r
use_test("function-name")
```

* This creates the file `tests/testthat/test-function-name.R`.
* If it had already existed, `use_test()` would have just opened it.
* You will notice that there is an example test in the newly created file - delete that code and replace it with something like this:

```r
test_that("strsplit1() splits a string", {
  expect_equal(strsplit1("a,b,c", split = ","), c("a", "b", "c"))
})
```

This tests that `function-name()` gives the expected result.

Run this test interactively, as you will when you write your own.
If `test_that()` or `function-name()` can't be found, that suggests that you probably need to call `load_all()`.

```r
test()
```

* Your tests are also run whenever you `check()` the package.


## Examples and How to Write Tests

Here are the updated contents of `tests/testthat/test-str_split_one.R`.
In addition to the change in the function's name and arguments, we've added a couple more tests.

```r
test_that("str_split_one() splits a string", {
  expect_equal(str_split_one("a,b,c", ","), c("a", "b", "c"))
})

test_that("str_split_one() errors if input length > 1", {
  expect_error(str_split_one(c("a,b","c,d"), ","))
})

test_that("str_split_one() exposes features of stringr::str_split()", {
  expect_equal(str_split_one("a,b,c", ",", n = 2), c("a", "b,c"))
  expect_equal(str_split_one("a.b", stringr::fixed(".")), c("a", "b"))
})
```


# `library(codecov)`

It is a good idea to use the [covr package](https://covr.r-lib.org) to track what proportion of your package's source code is exercised by the tests. 

Do these steps to integrate it into your package checks:

Add the badge to your `README.Rmd` by inputting the following line:

```r

```