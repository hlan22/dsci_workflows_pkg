---
title: "Writing Functions"
format: html
---

## Writing Functions 

To learn more about that take a look at the [Functions chapter](https://r4ds.hadley.nz/functions.html) of R for Data Science and the [Functions chapter](https://adv-r.hadley.nz/functions.html) of Advanced R.

For this course, the following notes are used with help from [chapter 52 of the textbook: Defining functions in R ](https://ubc-dsci.github.io/reproducible-and-trustworthy-workflows-for-data-science/lectures/910-functions-in-r.html)

<details>
<summary>How do functions Work in R?</summary>

* Functions in R are objects. This is referred to as “first-class functions”.
* The last line of the function returns the object created, or listed there. To return a value early use the special word `return`.

For example:

```{r}
math_two_numbers <- function(x, y, operation) {
  if (operation == "add") {
    return(x + y)
  }
  x - y
}

math_two_numbers (1, 4, "add")
math_two_numbers (1, 4, "subtract")
```

* Default values can also be specified in the function definition:


```{r}
math_two_numbers <- function(x, y, operation = "add") {
  if (operation == "add") {
    return(x + y)
  }
  x - y
}
math_two_numbers (1, 4)
```

### Lexical scoping in R

R’s lexical scoping follows several rules, including the following:

1. **Name masking**
  * Object names which are defined inside a function *mask* object names defined outside of that function.
  * If a variable is defined outside of the function in the global environment, regardless whatever is defined inside the function will be used
  * If something in the function hasn't been defined, it will look at the next level up continuously until there are no global environments to look at.
  * Here's an example:
```{r}
x <- 10

add_to_x <- function(to_add) {
    x <- 5
    to_add + x
}

add_to_x(2)
```


2. **Dynamic lookup**
  * R does **not** look up the values for objects it references when it is defined/created, instead it does this *when the function is called*. This can lead to the function returning different things depending on the values of the objects it references outside of the function’s environment.
  * For example:

```{r}
add_to_x <- function(to_add) {
    to_add + x
}
x <- 10
add_to_x(2)
x <- 20
add_to_x(2)
```


3. **A fresh start**
  * Functions in R have no memory of what happened the last time they were called. This happens because a new function environment is created, R created a new environment in which to execute it.
  * So if you add 2 to `x` and return it as `x`, then run the function again, it will still add 2 to the *original* `x`.
  
4. **Lazy evaluation**
  * R performs lazy evaluation, meaning it delays the evaluation of the function arguments until its value is needed within/inside the function. Since y is never referenced inside the function, R doesn’t complain, or even notice it. This would not work in python, it would complain:

```python
# Python code (`add_one(2)` would NOT work)
def add_one(x, y):
    x = x + 1
    return x
```

```{r}
# R code (this would work)
add_one <- function(x, y) {
    x <- x + 1
    return(x)
}

# both below work:
add_one(2, 1)
add_one(2)
```
</details>

<details>
<summary> Add Exception Handling!</summary>
Sometimes our code is correct but we still encounter errors. This commonly occurs with functions when users attempt to use them in weird and creative ways that the developer did not intend.

Often times, R will give a somewhat cryptic error message as to why the input is wrong, but it is not that helpful and time consuming. One way to help this is to have a function fail intentionally when incorrect user input is given. We could instead, for example, check the data type BEFORE we attempt the calculation, and if the wrong type was given throw a purposeful error with a helpful message.

For example:

```{r}
fahr_to_celsius <- function(temp) {
  if(!is.numeric(temp)) {
    stop("`fahr_to_celsius` expects a vector of numeric values")
  }
  (temp - 32) * 5/9
}
```

This is a great standard to have for real life. The only con to this, is in a time-limited exam, this will cause you to have to add a lot more tests, otherwise your code coverage score will be a lot lower. See more about code coverage in the [Testing Section](pages/testing.qmd).
</details>

<details>
<summary> Careful with quotations in R!</summary>

The functions from the `tidyverse` are beautiful to use interactively - with these functions, we can “pretend” that the data frame column names are objects in the global environment and refer to them without quotations (e.g., "")

However, the beauty of being able to refer to data frame column names in R without quotations, leads to problems when we try to use them in a function. 

Why does `filter` work with non-quoted variable names, but our function `filter_gap` fail? At a very high-level, this is because `filter` is doing more behind the scenes to handle these unquoted column names than we see without looking at the source code. So to make this work for our function, we need to do a little more work too.

In the newest release of the `rlang` R package, there has been the introduction of the `{{` (pronounced “curly curly”) operator. This operator does the necessary work behind the scenes so that you can continue to use unquoted column names with the `tidyverse` functions even when you use them in functions that you write yourself.

To use the `{{` operator, we “embrace” the unquoted column names when we refer to them inside our function body. An important note is that there are several ways to implement the usage of unquoted column names in R, and the `{{` operator only works with the tidyverse functions.

Here’s a function we show when we use the `{{` operator to “embrace” the unquoted column names:

```{r, eval=FALSE}
filter_gap <- function(col, val) {
  filter(gapminder, {{col}} == val)
}
```

For similar reasons, the walrus operator (`:=`) is needed when writing functions that create new columns using unquoted column names with the tidyverse functions.

</details>


<details>
<summary>Practice with Refactoring</summary>

Initial code:

```r
# Load data
data(mtcars)

# Fit model
model <- lm(mpg ~ wt, data = mtcars)

# Summarize
summary(model)

# Plot
plot(mtcars$wt, mtcars$mpg, main = "MPG vs Weight")
abline(model, col = "blue")
```

Refactored code:

```r
# Define a function to fit and summarize a linear model
fit_and_summarize <- function(data, formula) {
  model <- lm(formula, data = data)
  print(summary(model))
  return(model)
}

# Define a function to plot the regression line
plot_lm <- function(model, data, xvar, yvar) {
  plot(data[[xvar]], data[[yvar]], main = paste(yvar, "vs", xvar))
  abline(model, col = "blue")
}

# Use the functions
data(mtcars)
mod <- fit_and_summarize(mtcars, mpg ~ wt)
plot_lm(mod, mtcars, "wt", "mpg")
```

</details>

## ROxygen

(Taken from [The Whole Game](https://r-pkgs.org/whole-game.html) R Package building guide)

Wouldn't it be nice to get `?` help with your functions, just like we do with other R functions?
This requires that your package have a special R documentation file, `man/function-name.Rd`, written in an R-specific markup language that is sort of like LaTeX. We write a specially formatted comment right above the function in its source file, and then let a package called [roxygen2](https://roxygen2.r-lib.org) handle the creation of `man/function-name.Rd`.

If you use RStudio, open `R/function-name.R` in the source editor and put the cursor somewhere in the `function-name()` function definition.
Now left-click, `Code > Insert roxygen skeleton`.
A comment should appear above your function, in which each line begins with `#'`.
RStudio only inserts a barebones template, so you should modify it to look something like this:

```r
#' Split a string
#'
#' @param x A character vector with one element.
#' @param split What to split on.
#'
#' @return A character vector.
#' @export
#'
#' @examples
#' x <- "alfa,bravo,charlie,delta"
#' strsplit1(x, split = ",")
strsplit1 <- function(x, split) {
  strsplit(x, split = split)[[1]]
}
```
But we're not done yet!
We still need to trigger the conversion of this new roxygen comment into `man/strsplit1.Rd` with `document()`:

```r
document()
```

You should now be able to preview your help file like so:

```r
?function_name
```

## Practice With Functions

To practice writing functions in R, you can attempt this worksheet: <https://github.com/UBC-DSCI/dsci-310-student/blob/main/practice/worksheet_functions_in_r.ipynb>

*Note*: to access the automated software tests for feedback on your answers, you will want to clone or download [this GitHub repo](https://github.com/UBC-DSCI/dsci-310-student) and navigate to the `practice` directory.

You can also try practicing with [this repo](https://github.com/ttimbers/breast_cancer_predictor).


<details>
<summary> `wordplay` Examples </summary>

Here is an example of what functions should look like with my package `wordplay`:

```r
#' A high level summary about all the words
#'
#' @param df A data frame containing a column of words
#' @param column A character column containing a list of words
#'
#' @returns A tibble
#' @export
#'
#' @examples
#' example_words <- data.frame(word_column = c("alfa", "bravo", "charlie", "delta"))
#' all_words_summary(data = example_words, column = word_column)
#'
#' @importFrom dplyr mutate n_distinct %>%
#' @importFrom tibble tibble
#' @importFrom stats median sd
all_words_summary <- function(data, column = "word") {
  # checks for input data types
  if (!is.data.frame(data)) {
    stop("`data` must be a data frame.")
  }
  if (!column %in% colnames(data)) {
    stop(paste("Column", column, "does not exist in the data frame."))
  }
  if (!is.character(data[[column]]) && !is.factor(data[[column]])) {
    stop(paste("Column", column, "must be of type character or factor."))
  }

  df <- data %>%
    dplyr::mutate(
      word_temp = .data[[column]],
      length = nchar(word_temp))

  tibble::tibble(
    total_words = nrow(df),
    unique_words = dplyr::n_distinct(df$word_temp),
    avg_length = mean(df$length),
    median_length = stats::median(df$length),
    sd_length = stats::sd(df$length),
    longest_word = df$word_temp[which.max(df$length)],
    shortest_word = df$word_temp[which.min(df$length)]
  )
}
```

**Notice these key things in the function:**

* Formatting follows `package::function`
* Checks for correct data types at the start of the function, and gives back helpful error message if not correct
* Includes a default option for the `column` name, which is expected to be "word", but can be changed to whichever.

**Notice these key things in the ROxygen statement:**

* `@ImportFrom` statements that specify each package used and the specific function used
* The `@examples` give a clear example of all the different parameters

</details>

## Function Changes

Note that when you update functions and or roxygen statements, you need to update things for your package too! Run the following:

```r
devtools::document()
```
Which:

* Parses your `@param`, `@return`, `@examples`, etc. tags
* Updates the `.Rd` files in the `man/` folder
* Updates the `NAMESPACE` (e.g., adds `@export`ed functions)

Then run:

```r
devtools::test()
```

```r
devtools::check()
```
Which:

* Performs a full package check: documentation, code style, tests, imports, etc. It's the same check CRAN runs.

For a quick summary - what to run with a change:

```r
devtools::document()  # update docs
devtools::load_all()  # use the latest code
devtools::check()     # make sure it's solid
devtools::test()      # confirm nothing broke
devtools::build()     # rebuild the package
devtools::install()   # reinstall the updated version
```
