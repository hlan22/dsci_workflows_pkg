---
title: "DSCI 310 Final Exam Review"
---

Welcome to my website for my DSCI 310 final exam review!

This is a review of DSCI 310, but specifically for topics that will be covered on the final. This means there will be less emphasis on topics such as Docker containers, git basics, Renv, etc.

---

## Learning Outcomes

By the end of the course, students will be able to:

1. Defend and justify the importance of creating data science workflows that are reproducible and trustworthy and the elements that go into such a workflow (e.g., writing clear, robust, accurate and reproducible code, managing and sharing compute environments, defined collaboration strategies, etc).
2. Constructively criticize the workflows and data analysis of others in regards to its reproducibility and trustworthiness.
3. Develop a data science project (including code and non-code documents such as reports) that uses reproducible and trustworthy workflows
4. Demonstrate how to effectively share and collaborate on data science projects and software by creating robust code packages, using reproducible compute environments, and leveraging collaborative development tools.
5. Defend and justify the benefit of, and employ automated testing regimes, continuous integration and continuous deployment for managing and maintaining data science projects and packages.
6. Demonstrate strong communication, teamwork, and collaborative skills by working on a significant data science project with peers throughout the course.

---

## Outline of Assessments

##### Assignments
- [X] [**Assignment 1**](https://ubc-dsci.github.io/dsci-310-student/individual_assignment/ia1.html): Setup and Installation (you can find them [here](https://ubc-dsci.github.io/dsci-310-student/computer-setup.html))
- [X] [**Assignment 2**](https://ubc-dsci.github.io/dsci-310-student/individual_assignment/ia2.html): Git merge conflicts ([learn more here](https://www.atlassian.com/git/tutorials/using-branches/merge-conflicts))
    - [ ] Note: Make a review of the different types of conflicts
- [X] [**Assignment 3**](https://ubc-dsci.github.io/dsci-310-student/individual_assignment/ia3.html): Dockerfiles
- [X] [**Assignment 4**](https://ubc-dsci.github.io/dsci-310-student/individual_assignment/ia4.html): Reproducible reports using Quarto
    - [ ] Note: Need to make a summary page that lists all improvements possible
- [ ] [**Assignment 5**](https://ubc-dsci.github.io/dsci-310-student/individual_assignment/ia5.html): Packaging (for walk-through, see [here for R](https://r-pkgs.org/whole-game.html) or [here for python](https://py-pkgs.org/03-how-to-package-a-python))
    - [ ] Note: Need to learn how to do python packages
    - [X] Note: Need to summarize and streamline R packages
    - [ ] Note: Want to improve and update R packages made from this course
    - [ ] Note: Want to go over potential conflicts you can run into, and main things to know in a time crunch

##### Tutorials
- [X] [**Tutorial 1**](https://ubc-dsci.github.io/dsci-310-student/tutorials/t1.html): Setup
- [X] [**Tutorial 2**](https://ubc-dsci.github.io/dsci-310-student/tutorials/t2.html): Git Basics
    - [ ] Note: Transfer git basics info from dsci-review repo
- [ ] [**Tutorial 3**](https://ubc-dsci.github.io/dsci-310-student/tutorials/t3.html): R and Python Environments (`renv` and `conda`)
- [X] [**Tutorial 4**](https://ubc-dsci.github.io/dsci-310-student/tutorials/t4.html): Environments and Docker Containers
- [ ] [**Tutorial 5**](https://ubc-dsci.github.io/dsci-310-student/tutorials/t5.html): Bash Scripts and Github Actions
- [ ] [**Tutorial 6**](https://ubc-dsci.github.io/dsci-310-student/tutorials/t6.html): Refactoring a Quarto Report
- [ ] [**Tutorial 7**](https://ubc-dsci.github.io/dsci-310-student/tutorials/t7.html): Quarto and Github Pages
- [ ] [**Tutorial 8**](https://ubc-dsci.github.io/dsci-310-student/tutorials/t8.html): Writing Tests using `testthat` for R or `pytest` for Python
- [ ] [**Tutorial 9**](https://ubc-dsci.github.io/dsci-310-student/tutorials/t9.html): Create a Quarto Website (using `gh-pages`)
    - [ ] Note: Making a Website (through main, docs, and gh-pages)
- [X] [**Tutorial 10**](https://ubc-dsci.github.io/dsci-310-student/tutorials/t10.html): Packaging (work period for Assignment 5)
- [ ] [**Tutorial 11**](https://ubc-dsci.github.io/dsci-310-student/tutorials/t11.html): Packaging with Continuous Integration and Continuous Deployment

#### Milestones
- [X] [**Milestone 1**](https://ubc-dsci.github.io/dsci-310-student/project/m1.html): Data Analysis, Docker, Git basics
- [X] [**Milestone 2**](https://ubc-dsci.github.io/dsci-310-student/project/m2.html): Abstract code, Quarto doc, Makefile
    - [ ] Note: Transfer information about Makefiles from dsci-review repo
- [ ] [**Milestone 3**](https://ubc-dsci.github.io/dsci-310-student/project/m3.html): Abstract functions, Testing, Validation
- [ ] [**Milestone 4**](https://ubc-dsci.github.io/dsci-310-student/project/m4.html): Packaging, Documentation, and Fixing previous issues

#### Other

- [ ] Review the [Textbook](https://ubc-dsci.github.io/reproducible-and-trustworthy-workflows-for-data-science/)
- [X] Review Lecture Notes (All of my repos and `.txt` files)
- [ ] Review Lecture Concepts (All of Daniel's repos)
- [ ] Review group project [analysis](https://github.com/DSCI-310-2025/dsci-310-group-7-data-dudes) and [package](https://github.com/DSCI-310-2025/pkg.drugage)
- [ ] Grab quarto notes from other repos including: [insurance statistics](https://github.com/hlan22/InsuranceStats/tree/main)
- [ ] Make a simple numbered list of steps needed to make a new package
- [ ] Know how to save images, `.csv`, and `.RDS` things to an `output` folder for reproducible results!

Based off professor recommendations, look at:

- [X] [Chapter 52: Functions in R](https://ubc-dsci.github.io/reproducible-and-trustworthy-workflows-for-data-science/lectures/910-functions-in-r.html)
- [X] [The Whole Game: Package Creation Walk Through](https://r-pkgs.org/whole-game.html)
- [ ] Practice the tutorial where we created the `is_leap()` function and the course repos - and turn that into a package
- [ ] Practice copying template repository into organization!

---

## Final Exam Information

* The best way to study is to look though the *in-class examples*, *individual assignments*, and be comfortable with all the mechanics you were asked to do for your *milestone assignments*.
* Think of the final as an individual assessment for everything you were asked to do for the project milestones.
* You will have 2 hours for the exam. For reference, it took [the professor] just under 30 minutes to get though it.
* Below is the instructions that you will see before the exam. The format is the same as the midterm.

### Final Exam Instructions

Welcome to your final exam for the course!

#### Topics Covered:
1. Interact with Git + GitHub with branches and pull requests.
2. Split a monolithic report into separate scripts.
3. Use a Makefile to run your analysis code.
4. Add functions and unit tests to a package.
5. Create a functioning R package.

##### Exam Notes
* This exam will have you use an exam template repository to practice the skills we have covered in class this term.
* You will not be building a full report or full package from scratch. We have provided a skeleton for you to work with.
* AI / LLM / ChatBots are allowed for the exam
* You are not allowed to communicate or collaborate with another human / classmate during the exam.

##### New Skill Necessary
There may be a new mechanics you will need to get access to the exam, specifically copying a template repository into the organization. If this is new to you and you want an example to practice for:

1. Go to <https://github.com/DSCI-310/template-repository-example>
2. Click the green "Use this template" button
3. Select "Create a new repository"
4. Leave the "Include all branches" unchecked.
5. Set the ownership to your own account, rename the repo as needed - For the exam, you will use the course organization and have a specific repo name for the exam
6. Treat this "template" that you have copied into your account as a new repository. It is pre-populated with files so you are not starting from a completely empty repository.

---

## Credit

Although this repo is made by Heidi, credit goes towards Daniel Chen and other contributors for the DSCI 310 course for most material in the repo.
Thanks!
