---
title: "Websites With Quarto"
format:
  html:
    code-copy: true # note: this is already in the _quarto.yml file, dont need
execute:
  eval: false
---

Here's a basic outline as to how to make websites using quarto (and rstudio/vscode)!

* Fun fact! This website was made with the [darkly theme](https://bootswatch.com/darkly/). The default is cosmo if you want to change it back :)

## Website "Bones"

Start with:

```bash
quarto create
```

* Select `project` > `website` > Directory: `/` > Title: `Final Review`

Alternatively, create the following files:

* `_quarto.yml`
* `index.qmd`
* `<project_name>.Rproj`
* `styles.css` (not necessary)
* other `.qmd` files (not necessary)
* Add files to `.gitignore`

## 3 Main Locations

Here are the 3 main locations you can use GitHub Pages for rendering your website!

#### `/(root)`

You are ready simply by doing:

Select the right option in Settings > Pages > Build and deployment > Branch.

```bash
quarto render index.qmd
```

This will make an `index.html` file that git will look for. If you do not have a index.html file in your root folder, it will instead display your `README.md`!

Push all changes, including the rendered page, to the (main branch) repo.

#### `docs/`

There are a few tasks necessary:

Select the right option in Settings > Pages > Build and deployment > Branch.

* Ensure `docs/` is not blocked in the `.gitignore` file
* Set `output-dir: docs` under `project:` type: in `_quarto.yml`
* You DO need a `_quarto.yml` file, in order for git to recognize it is a website

#### `gh-pages` branch

Select the right option in Settings > Pages > Build and deployment > Branch.

* Delete any `docs/` folder 
* block the `docs` and `_site` folder in the `.gitignore` file

```bash
git checkout --orphan gh-pages
git reset --hard # make sure all changes are committed before running this!
git commit --allow-empty -m "Initialising gh-pages branch"
git push origin gh-pages
```
Which now you can test-run the website with:

```bash
git switch main
quarto publish gh-pages
```

You can still use the regular `quarto render` or `quarto preview` to build your site locally, but you will no longer need to manually build and push the site to the main branch!

Add a github action to make it automatically build:

```bash
code .github/workflows/build.yml
```

And copy the following contents into it:

```bash
on:
  workflow_dispatch:
  push:
    branches: main

name: Quarto Publish

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Set up Quarto
        uses: quarto-dev/quarto-actions/setup@v2

      - name: Render and Publish
        uses: quarto-dev/quarto-actions/publish@v2
        with:
          target: gh-pages
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
```

